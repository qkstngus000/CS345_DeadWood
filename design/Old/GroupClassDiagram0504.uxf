<diagram program="umletino" version="15.0.0"><zoom_level>9</zoom_level><element><id>UMLClass</id><coordinates><x>108</x><y>603</y><w>189</w><h>72</h></coordinates><panel_attributes>Dice
--

--
rollDice(): int</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>702</x><y>639</y><w>189</w><h>90</h></coordinates><panel_attributes>Casting Office
--
- castingInfo: int[5][2]
--
- upgradeManager(Player): bool</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>810</x><y>405</y><w>216</w><h>126</h></coordinates><panel_attributes>Room
--
- adjRoom: Room[4]
+ Direction: enum
- String name
- numActors: int
--
+ Room(String name)
+ setNeighbors(Room[] neighbors): void
+ Action(Player): bool</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>396</x><y>504</y><w>279</w><h>189</h></coordinates><panel_attributes>SceneRoom
--
+ static SceneLeft: int
+ static NumScene: int
- String name
- maxShots: int
- curShot: int
- roomRole: Role[]
- actorInfo: ArrayList&lt;Player&gt;
- scene: SceneCard
--
+ SceneRoom(String name, int maxShots, Role[] roles)
- roleManager(Player p): bool
+ updateShot(): void
+ closeRoom(): Void
+ firstVisit(): void</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>126</x><y>243</y><w>189</w><h>243</h></coordinates><panel_attributes>Player
--
- name: String
- room: Room
- rank: int
- dollar: int
- credit: int
- token: int
- role: Role
- totalScore: int
--
+ Player(name, Trailer)
+ playerTurn(): void
+ calcScore(): void
+ takeRole(Role): bool
+ act(Dice): void
+ rehearse(): bool
+ removeRole(): void
+ move(): bool</panel_attributes><additional_attributes></additional_attributes></element><element><id>Relation</id><coordinates><x>900</x><y>522</y><w>27</w><h>81</h></coordinates><panel_attributes>lt=&lt;&lt;-</panel_attributes><additional_attributes>10;10;10;70</additional_attributes></element><element><id>Relation</id><coordinates><x>666</x><y>567</y><w>261</w><h>36</h></coordinates><panel_attributes></panel_attributes><additional_attributes>10;20;270;20</additional_attributes></element><element><id>UMLClass</id><coordinates><x>135</x><y>738</y><w>189</w><h>171</h></coordinates><panel_attributes>SceneCard
--
+ name: String
+ roles: Role[]
- description: String
+ flip: bool
- cardUsed: bool
- budget

--
+SceneCard(String name, String img,
int budget, Role[]  roles)
+cardUsed(): bool </panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>423</x><y>765</y><w>189</w><h>108</h></coordinates><panel_attributes>Role
--
- roleName: String
- rank: int
- main: bool
+ roleDeprived: bool
--
+ Role(roleName, rank, main)</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>810</x><y>171</y><w>189</w><h>135</h></coordinates><panel_attributes>Board
--
- numRoom: int
- Deck: ArrayList&lt;SceneCard&gt;
- rooms: Rooms[numRooms]
--
+ Board(boardData, cardData)
+ reset(): void
- distributeCard(SceneRoom r): void
</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>513</x><y>18</y><w>189</w><h>189</h></coordinates><panel_attributes>DeadWood
--
- day: int
- numPlayer: int
- curPlayer: Player
- listPlayer: Player[numPlayer]
- board: Board
--
+DeadWood()
+startEnv(): void
+trackDate(): void
+winner(): void
+nextTurnPlayer(): void
+ main(): void</panel_attributes><additional_attributes></additional_attributes></element><element><id>Relation</id><coordinates><x>693</x><y>63</y><w>243</w><h>126</h></coordinates><panel_attributes>lt=&lt;&lt;&lt;&lt;-
m1= 1
m2= 1
</panel_attributes><additional_attributes>10;20;240;20;240;120</additional_attributes></element><element><id>Relation</id><coordinates><x>207</x><y>108</y><w>324</w><h>153</h></coordinates><panel_attributes>lt=&lt;&lt;&lt;&lt;-
m1=1
m2=2...8
</panel_attributes><additional_attributes>340;20;10;20;10;150</additional_attributes></element><element><id>Relation</id><coordinates><x>891</x><y>297</y><w>36</w><h>126</h></coordinates><panel_attributes>lt=&lt;&lt;&lt;&lt;-
m1=1
m2=12
</panel_attributes><additional_attributes>10;10;10;120</additional_attributes></element><element><id>Relation</id><coordinates><x>189</x><y>477</y><w>36</w><h>144</h></coordinates><panel_attributes>m1=1
m2=1</panel_attributes><additional_attributes>10;10;10;140</additional_attributes></element><element><id>Relation</id><coordinates><x>288</x><y>621</y><w>126</w><h>36</h></coordinates><panel_attributes>m1=1
m2=1</panel_attributes><additional_attributes>10;10;120;10</additional_attributes></element><element><id>Relation</id><coordinates><x>504</x><y>684</y><w>45</w><h>99</h></coordinates><panel_attributes>m1=1
m2=3...7</panel_attributes><additional_attributes>10;10;10;90</additional_attributes></element><element><id>Relation</id><coordinates><x>315</x><y>810</y><w>126</w><h>36</h></coordinates><panel_attributes>m1=1
m2=1...3</panel_attributes><additional_attributes>10;10;120;10</additional_attributes></element><element><id>Relation</id><coordinates><x>315</x><y>684</y><w>99</w><h>72</h></coordinates><panel_attributes>m1=1
m2=1</panel_attributes><additional_attributes>10;60;10;10;90;10</additional_attributes></element><element><id>Relation</id><coordinates><x>306</x><y>378</y><w>243</w><h>144</h></coordinates><panel_attributes>m1=0...8
m2=1</panel_attributes><additional_attributes>10;10;240;10;240;140</additional_attributes></element><element><id>Relation</id><coordinates><x>315</x><y>252</y><w>909</w><h>675</h></coordinates><panel_attributes>m1=1...*
m2= 1</panel_attributes><additional_attributes>10;720;990;720;990;10;760;10</additional_attributes></element><element><id>Relation</id><coordinates><x>603</x><y>189</y><w>567</w><h>666</h></coordinates><panel_attributes>m1=1...*
m2= 1</panel_attributes><additional_attributes>10;710;600;710;600;10</additional_attributes></element><element><id>UMLClass</id><coordinates><x>1044</x><y>126</y><w>234</w><h>72</h></coordinates><panel_attributes>XMLParser
--
--
+ XMLParseBoard(String boardData): Room[]
+ XMLParseCard(String cardData):
ArrayList&lt;SceneCard&gt;
</panel_attributes><additional_attributes></additional_attributes></element><element><id>Relation</id><coordinates><x>1197</x><y>189</y><w>36</w><h>90</h></coordinates><panel_attributes>m1=1</panel_attributes><additional_attributes>10;10;10;80</additional_attributes></element><element><id>Relation</id><coordinates><x>810</x><y>576</y><w>27</w><h>81</h></coordinates><panel_attributes></panel_attributes><additional_attributes>10;70;10;10</additional_attributes></element><element><id>Relation</id><coordinates><x>1017</x><y>189</y><w>99</w><h>297</h></coordinates><panel_attributes>m1=1...*
m2=1</panel_attributes><additional_attributes>10;300;80;300;80;10</additional_attributes></element><element><id>UMLNote</id><coordinates><x>972</x><y>36</y><w>171</w><h>72</h></coordinates><panel_attributes>XMLParser is responsible for
creating all rooms, scenes and
roles in the game and returning
them in data structures to the
board class.</panel_attributes><additional_attributes></additional_attributes></element></diagram>